name: Deploy Dist - Second

# push is the event that triggers the workflow ,
# Also we can add [] inside array to add multiple events
# Now i want to manually trigger the workflow , basically i want to create a button in github actions to trigger the workflow

# 1st syntax
# on: [push, workflow_dispatch]

# 2nd syntax
on:
  push:
    branches:
      - main
      - "feature/**"
    paths-ignore:
      - ".github/workflows/*"
      - "README.md"
  workflow_dispatch:

jobs:
  # This is first job, which run on ubuntu-latest
  test-job:
    runs-on: ubuntu-latest
    # steps is an array of steps that will be executed in the job
    steps:
      # This is first step, which will be executed in the job
      - name: Get Code
        uses: actions/checkout@v4
        # If i need to run multiple steps in a job , i use to use | operator
        # run multiple command in a single step
        # run: |
        #   echo "Cloning the Repository"
        #   echo "${{toJson(github)}}"
        #   echo "${{toJson(github.repository )}}"
        #   git clone https://github.com/${{github.repository}}.git
        # By-default we have reserved context variables of the job in the workflow file, which we can use to access the job's context
        # These all are exposed context variables of the job in the workflow file, which we can use to access the job's context
      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Print NODE Version
        run: node -v
      #  when dependencies install npm will create a cache file in the path ~/.npm with a unique key
      #  so that next time when we run the workflow it will not install the dependencies again
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          # How cache uniqe key is generated ?
          # 1. runner.os -> it will give the os of the runner
          # 2. node-version -> it will give the node version of the runner
          # 3. hashFiles('**/package-lock.json') -> it will give the hash of the package-lock.json file
          # 4. ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} -> it will give the unique key for the cache
          # And once any new dependency is added it will create a new cache file with a new key , and delete the old cache file , because it's uniqueness is based on package-lock.json file
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci
        #   ci read dependencies from package-lock.json , hence it donload exact verison of the dependencies , but package contains ^ which means it install latest version of dependencies
        # run: npm install -> this read package.json to install the dependencies ,Basically it update 18.2.9 (2.9) not use 19 version either available or not

      - name: Run Tests
        run: npm run test

  build:
    needs: test-job
    runs-on: ubuntu-latest
    steps:
      # This is first step, which will be executed in the job
      - name: Get Code
        uses: actions/checkout@v4
        # If i need to run multiple steps in a job , i use to use | operator
        # run multiple command in a single step
        # run: |
        #   echo "Cloning the Repository"
        #   echo "${{toJson(github)}}"
        #   echo "${{toJson(github.repository )}}"
        #   git clone https://github.com/${{github.repository}}.git
        # By-default we have reserved context variables of the job in the workflow file, which we can use to access the job's context
        # These all are exposed context variables of the job in the workflow file, which we can use to access the job's context
      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          # How cache uniqe key is generated ?
          # 1. runner.os -> it will give the os of the runner
          # 2. node-version -> it will give the node version of the runner
          # 3. hashFiles('**/package-lock.json') -> it will give the hash of the package-lock.json file
          # 4. ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} -> it will give the unique key for the cache
          # And once any new dependency is added it will create a new cache file with a new key , and delete the old cache file , because it's uniqueness is based on package-lock.json file
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        run: npm ci
        #   ci read dependencies from package-lock.json , hence it donload exact verison of the dependencies , but package contains ^ which means it install latest version of dependencies
        # run: npm install -> this read package.json to install the dependencies ,Basically it update 18.2.9 (2.9) not use 19 version either available or not
      - name: Build Project
        run: npm run build
      - name: Upload This Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist

  deploy-job:
    # This will run only if test-job is successful , otherwise it will not run
    # With this we can make it dependent on other job
    # Also we can make it sequential , means it will run only if previous job is successful
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download This Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/
      - name: Deploy Project
        run: echo "Deploy Successfully"
